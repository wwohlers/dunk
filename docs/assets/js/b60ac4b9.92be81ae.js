"use strict";(self.webpackChunkdunk_docs=self.webpackChunkdunk_docs||[]).push([[593],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),p=u(n),g=r,m=p["".concat(l,".").concat(g)]||p[g]||s[g]||i;return n?o.createElement(m,a(a({ref:t},c),{},{components:n})):o.createElement(m,a({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=p;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:r,a[1]=d;for(var u=2;u<i;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3981:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return p}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],d={sidebar_position:5},l="Adding children",u={unversionedId:"quick-guide/adding-children",id:"quick-guide/adding-children",title:"Adding children",description:"A core feature of Dunk is the ability to nest modules so that your store's organization can mimic the organization of the rest of your application. This is incredibly easy to do with Dunk.",source:"@site/docs/quick-guide/adding-children.md",sourceDirName:"quick-guide",slug:"/quick-guide/adding-children",permalink:"/dunk/docs/quick-guide/adding-children",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quick-guide/adding-children.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Creating the store",permalink:"/dunk/docs/quick-guide/creating-store"}},c=[{value:"Creating a new module",id:"creating-a-new-module",children:[],level:2},{value:"Fixing <code>RootModule</code>",id:"fixing-rootmodule",children:[],level:2},{value:"Fixing <code>rootModule</code>",id:"fixing-rootmodule-1",children:[],level:2},{value:"Fixing <code>rootBridge</code>",id:"fixing-rootbridge",children:[],level:2}],s={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"adding-children"},"Adding children"),(0,i.kt)("p",null,"A core feature of Dunk is the ability to nest modules so that your store's organization can mimic the organization of the rest of your application. This is incredibly easy to do with Dunk."),(0,i.kt)("h2",{id:"creating-a-new-module"},"Creating a new module"),(0,i.kt)("p",null,"The first step is to create a new module. It's recommended to follow a directory structure that mimics your module hierarchy, i.e., create a new folder for each child module."),(0,i.kt)("p",null,"Let's create a simple child module for todos. We'll begin by defining its type, module, and bridge."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type TodoModule = DunkModule</*...*/>;\nconst todoModule = createDunkModule<TodoModule>(/*...*/);\nconst todoBridge = createDunkBridge(todoModule, /*...*/);\n")),(0,i.kt)("h2",{id:"fixing-rootmodule"},"Fixing ",(0,i.kt)("inlineCode",{parentName:"h2"},"RootModule")),(0,i.kt)("p",null,"When we originally defined the ",(0,i.kt)("inlineCode",{parentName:"p"},"RootModule")," type, we defined a ",(0,i.kt)("inlineCode",{parentName:"p"},"RootChildren")," type which was empty."),(0,i.kt)("p",null,"Now that we have a child, we can redefine it like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type RootChildren = {\n  todos: TodoModule;\n}\n")),(0,i.kt)("h2",{id:"fixing-rootmodule-1"},"Fixing ",(0,i.kt)("inlineCode",{parentName:"h2"},"rootModule")),(0,i.kt)("p",null,"Now that we've changed ",(0,i.kt)("inlineCode",{parentName:"p"},"RootModule"),", there will be an error under ",(0,i.kt)("inlineCode",{parentName:"p"},"createDunkModule")," since we don't provide any value for the ",(0,i.kt)("inlineCode",{parentName:"p"},"todos")," child. Let's change that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export const rootModule = createDunkModule<RootModule>(\n  // ...\n  {\n    todos: todoModule,\n  },\n  // ...\n)\n")),(0,i.kt)("h2",{id:"fixing-rootbridge"},"Fixing ",(0,i.kt)("inlineCode",{parentName:"h2"},"rootBridge")),(0,i.kt)("p",null,"Because bridges imitate the organization of their modules, we'll have to fix the root bridge by supplying the todos bridge to it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export const rootBridge = createDunkBridge(\n  // ...\n  {\n    todos: todosBridge,\n  },\n)\n")),(0,i.kt)("p",null,"Now, you can use the bridge like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"store.dispatch(bridge.todos.actionCreators.addTodo());\n")))}p.isMDXComponent=!0}}]);